# Name of your application. Used to uniquely configure containers.
service: vn-stock-info-app

# Name of the container image.
image: ghcr.io/huyvqhn/vn-stock-info-app

# Deploy to these servers.
servers:
  web:
    - 38.54.30.6
  job:
    hosts:
      - 38.54.30.6
    cmd: bin/rails runner "Sidekiq::CLI.instance.run"

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: 38.54.30.6
  # Proxy connects to your container on port 80 by default.
  # app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server for GitHub Container Registry
  server: ghcr.io
  username: huyvqhn

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    RAILS_ENV: production
    RAILS_LOG_LEVEL: info
    RAILS_MAX_THREADS: 5
    DATABASE_URL: postgresql://trader:trader@38.54.30.6:5432/vnstocks_production
    REDIS_URL: redis://38.54.30.6:6379/0
  secret:
    - RAILS_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
aliases:
  shell: app exec --interactive --reuse "bash"
  console: app exec --interactive --reuse "bin/rails console"
  db-migrate: app exec "bin/rails db:migrate"
  db-seed: app exec "bin/rails db:seed"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
volumes:
  - "app_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
boot:
  limit: 1 # Can also specify as a percentage of total hosts, such as "25%"
  wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:15
    host: 38.54.30.6
    port: 5432
    env:
      clear:
        POSTGRES_DB: vnstocks_production
        POSTGRES_USER: trader
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/postgresql/production.cnf:/etc/postgresql/postgresql.conf
    directories:
      - data:/var/lib/postgresql/data
  redis:
    image: redis:7-alpine
    host: 38.54.30.6
    port: 6379
    directories:
      - data:/data
